<?xml version="1.0" encoding="US-ASCII"?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
    <!ENTITY rfc2865 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2865.xml'>
<!--
    <!ENTITY rfc3688 PUBLIC ''
    'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3688.xml'>
    -->
    <!ENTITY rfc5277 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5277.xml'>
    <!ENTITY rfc5607 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5607.xml'>
    <!ENTITY rfc6020 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6020.xml'>
    <!ENTITY rfc6241 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml'>
    <!ENTITY rfc6991 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6991.xml'>
    <!ENTITY rfc7230 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7230.xml'>
    <!ENTITY rfc7950 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.7950.xml'>

    <!ENTITY rfc8040 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.8040.xml'>

    <!ENTITY I-D.ietf-netmod-revised-datastores PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-netmod-revised-datastores-02.xml'>

    ]>

<rfc category="std"
     obsoletes="6536"
     docName="draft-ietf-netconf-rfc6536bis-latest"
     ipr="trust200902">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc comments="no" ?>
<?rfc inline="no" ?>
<?rfc editing="no" ?>
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc rfcedstyle="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc iprnotified="no"?>

 <front>
  <title abbrev="NACM">
    Network Configuration Protocol (NETCONF) Access Control Model
  </title>
  <author fullname="Andy Bierman"
          initials="A.B."
          surname="Bierman">
   <organization>YumaWorks</organization>
   <address>
     <postal>
       <street>685 Cochran St.</street>
       <street>Suite #160</street>
       <city>Simi Valley</city>
       <region>CA</region>
       <code>93065</code>
       <country>USA</country>
     </postal>
     <email>andy@yumaworks.com</email>
   </address>
  </author>
  <author fullname="Martin Bjorklund"
          initials="M.B."
          surname="Bjorklund">
   <organization>Tail-f Systems</organization>
   <address>
    <email>mbj@tail-f.com</email>
   </address>
  </author>

  <date month="June" day="27" year="2017" />
  <area>Management</area>
  <workgroup>Internet Engineering Task Force</workgroup>
  <keyword>NETCONF</keyword>
  <keyword>RESTCONF</keyword>
  <keyword>YANG</keyword>
  <keyword>XML</keyword>


  <abstract>
   <t>
    The standardization of network configuration interfaces for use
    with the Network Configuration Protocol (NETCONF) or RESTCONF
    protocol requires a structured and secure
    operating environment that promotes human usability and
    multi-vendor interoperability.  There is a need for standard
    mechanisms to restrict NETCONF or RESTCONF protocol access for particular
    users to a pre-configured subset of all available NETCONF or
    RESTCONF protocol operations and content.
    This document defines such an access control model.
   </t>
   <t>
     This document obsoletes RFC 6536.
   </t>
  </abstract>
 </front>


 <middle>
  <section title="Introduction">
    <t>
      The NETCONF and RESTCONF protocols do not provide any standard
      mechanisms to restrict the protocol operations and content that
      each user is authorized to access.
    </t>
    <t>
      There is a need for interoperable management of the
      controlled access to administrator-selected portions of the
      available NETCONF or RESTCONF content within a particular server.
    </t>
    <t>
      This document addresses access control mechanisms for the
      Operations and Content layers of NETCONF, as defined in <xref
      target="RFC6241"/>, and RESTCONF, as defined
      in <xref target="RFC8040" />.
      It contains three main sections:
      <list style="numbers">
        <t>Access Control Design Objectives</t>
        <t>NETCONF Access Control Model (NACM)</t>
        <t>YANG Data Model (ietf-netconf-acm.yang)</t>
      </list>
    </t>
    <t>
      YANG version 1.1 <xref target="RFC7950"/>
      adds two new constructs that need special access control
      handling. The "action" statement is similar to the "rpc"
      statement, except it is located within a data node.
      The "notification" statement can also be located within
      a data node.
    </t>
    <section title="Terminology">
      <t>
        The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
        "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
        and "OPTIONAL" in this document are to be interpreted as
        described in <xref target="RFC2119"/>.
      </t>

      <t>
        The following terms are defined in
        <xref target="I-D.ietf-netmod-revised-datastores"/> and
        are not redefined here:
        <list style="symbols">
          <t>datastore</t>
          <t>configuration datastore</t>
          <t>conventional configuration datastore</t>
          <t>candidate configuration datastore</t>
          <t>running configuration datastore</t>
          <t>startup configuration datastore</t>
          <t>operational state datastore</t>
          <t>client</t>
          <t>server</t>
        </list>
      </t>

      <t>
        The following terms are defined in
        <xref target="RFC6241"/> and
        are not redefined here:
        <list style="symbols">
          <t>protocol operation</t>
          <t>session</t>
          <t>user</t>
        </list>
      </t>

      <t>
        The following terms are defined in
        <xref target="RFC7950"/>
        and are not redefined here:
        <list style="symbols">
          <t>action</t>
          <t>data node</t>
          <t>data definition statement</t>
        </list>
      </t>

      <t>
        The following terms are defined in
        <xref target="RFC8040"/>
        and are not redefined here:
        <list style="symbols">
          <t>data resource</t>
          <t>datastore resource</t>
          <t>operation resource</t>
          <t>target resource</t>
        </list>
      </t>

      <t>
        The following term is defined in <xref target="RFC7230"/>
        and is not redefined here:
        <list style="symbols">
          <t>request URI</t>
        </list>
      </t>

      <t>
        The following terms are used throughout this document:
        <list style="hanging">
          <t hangText="access control:">
            A security feature provided by the server
            that allows an administrator to restrict access to a
            subset of all protocol operations and data,
            based on various criteria.
          </t>
          <t hangText="access control model (ACM):">
            A conceptual model used to configure and monitor
            the access control procedures desired by the administrator
            to enforce a particular access control policy.
          </t>
          <t hangText="access control rule:">
            The criterion used to determine if a
            particular access operation will be
            permitted or denied.
          </t>
          <t hangText="access operation:">
            How a request attempts to access a conceptual object.
            One of "none", "read", "create", "delete", "update", or
            "execute".
          </t>
          <t hangText="data node hierarchy:">
            The hierarchy of data nodes that identifies
            the specific "action" or "notification" node
            in the datastore.
          </t>
          <t hangText="recovery session:">
            A special administrative session that is given
            unlimited NETCONF access and is exempt from all access
            control enforcement.  The mechanism(s) used
            by a server to control and identify whether or not
            a session is a recovery session are
            implementation specific and outside
            the scope of this document.
          </t>
          <t hangText="write access:">
            A shorthand for the "create", "delete", and "update"
            access operations.
          </t>
        </list>
      </t>
    </section>

    <section title="Changes Since RFC 6536">
      <t>
        The NACM procedures and data model have been updated
        to support new data modeling capabilities in the
        version 1.1. of the YANG data modeling language.
        The "action" and "notification" statements can be used within
        data nodes to define data-model specific operations and
        notifications.
      </t>
      <t>
        An important use-case for these new YANG
        statements is the increased access control granularity
        that can be achieved over top-level "rpc" and "notification"
        statements.  The new "action" and "notification" statements
        are used within data nodes, and access to the action or
        notification can be restricted to specific instances
        of these data nodes.
      </t>
      <t>
        Support for the RESTCONF protocol has been added.
        The RESTCONF operations are similar to the NETCONF operations,
        so a simple mapping to the existing NACM procedures
        and data model is possible.
      </t>
    </section>
  </section>

  <section title="Access Control Design Objectives">

    <t>
      This section documents the design objectives for the NETCONF
      Access Control Model presented in <xref target="acm"/>.
    </t>


    <section title="Access Control Points">
      <t>
        NETCONF allows server implementors to add new custom
        protocol operations, and the YANG Data Modeling Language
        supports this feature.  These operations can be defined
        in standard or proprietary YANG modules.
      </t>
      <t>
        It is not possible to design an ACM for NETCONF that
        only focuses on a static set of standard protocol operations
        defined by the NETCONF protocol itself,
        like some other protocols.  Since few assumptions
        can be made about an arbitrary protocol operation,
        the NETCONF architectural server components need to
        be protected at three conceptual control points.
      </t>
      <t>
        These access control points, described in <xref
        target="control_points"/>, are as follows:
        <list style="hanging">
          <t hangText="protocol operation:">
            Permission to invoke specific protocol operations.
          </t>
          <t hangText="datastore:">
            Permission to read and/or alter
            specific data nodes within any datastore.
          </t>
          <t hangText="notification:">
            Permission to receive
            specific notification event types.
          </t>
        </list>
      </t>


      <t>
        <figure anchor="control_points">
          <artwork><![CDATA[              +-------------+                 +-------------+
 client       |  protocol   |                 |  data node  |
 request -->  |  operation  | ------------->  |   access    |
              |  allowed?   |   datastore     |  allowed?   |
              +-------------+   or state      +-------------+
                                data access


              +----------------+
              |  notification  |
 event -->    |  allowed?      |
              +----------------+]]>
          </artwork>
        </figure>
      </t>
    </section>
    <section title="Simplicity">
      <t>
        There is concern that a complicated ACM will not
        be widely deployed because it is too hard to use.
        It needs to be easy to do simple things and possible to do
        complex things, instead of hard to do everything.
      </t>
      <t>
        Configuration of the access control system needs to be as
        simple as possible.  Simple and common tasks need to be easy
        to configure and require little expertise or domain-specific
        knowledge.  Complex tasks are possible using additional
        mechanisms, which may require additional expertise.
      </t>
      <t>
        A single set of access control rules ought to be able
        to control all types of NETCONF protocol operation invocation,
        all datastore access, and all notification events.
      </t>
      <t>
        Access control ought to be defined with a small and familiar
        set of permissions, while still allowing full control
        of datastore access.
      </t>
    </section>
    <section title="Procedural Interface">
      <t>
        The NETCONF protocol uses a remote procedure call model
        and an extensible set of protocol operations.
        Access control for any possible protocol operation is necessary.
      </t>
    </section>

    <section title="Datastore Access">
      <t>
        It is necessary to control access to specific nodes and
        subtrees within the datastore, regardless of which
        protocol operation, standard or proprietary, was used to
        access the datastore.
      </t>
    </section>

    <section title="Users and Groups">
      <t>
        It is necessary that access control rules for a single user or
        a configurable group of users can be configured.
      </t>
      <t>
        The ACM needs to support the concept of administrative groups,
        to support the well-established distinction between
        a root account and other types of less-privileged
        conceptual user accounts.
        These groups need to be configurable by the administrator.
      </t>
      <t>
        It is necessary that the user-to-group mapping can be
        delegated to a central server, such as a RADIUS server <xref
        target="RFC2865"/><xref target="RFC5607"/>.  Since
        authentication is performed by the transport layer
        and RADIUS performs authentication and service authorization
        at the same time, the underlying transport protocol needs to be
        able to report a set of group names associated with the user
        to the server.  It is necessary that the administrator can
        disable the usage of these group names within the ACM.
      </t>
    </section>
    <section title="Maintenance">
      <t>
        It ought to be possible to disable part or all of the
        access control model enforcement procedures without deleting any
        access control rules.
      </t>
    </section>
    <section title="Configuration Capabilities">
      <t>
        Suitable configuration and monitoring mechanisms
        are needed to allow an administrator to easily manage all
        aspects of the ACM's behavior. A standard data model,
        suitable for use with the &lt;edit-config&gt;
        protocol operation,
        needs to be available for this purpose.
      </t>
      <t>
        Access control rules to restrict access operations on specific
        subtrees within the configuration datastore need to
        be supported.
      </t>
    </section>
    <section title="Identifying Security-Sensitive Content">
      <t>
        One of the most important aspects of the data model
        documentation, and biggest concerns during deployment,
        is the identification of security-sensitive content.
        This applies to protocol operations in NETCONF, not just data
        and notifications.
      </t>
      <t>
        It is mandatory for security-sensitive objects
        to be documented in the Security Considerations
        section of an RFC.  This is nice, but it
        is not good enough, for the following reasons:
        <list style="symbols">
          <t>
            This documentation-only approach forces administrators to
            study the RFC and determine if there are any
            potential security risks introduced by a new
            data model.
          </t>
          <t>
            If any security risks are identified, then
            the administrator must study some more RFC text
            and determine how to mitigate the security risk(s).
          </t>
          <t>
            The ACM on each server must be configured to
            mitigate the security risks, e.g., require
            privileged access to read or write the
            specific data identified in the Security
            Considerations section.
          </t>
          <t>
            If the ACM is not pre-configured, then there
            will be a time window of vulnerability
            after the new data model is loaded and before
            the new access control rules for that data model
            are configured, enabled, and debugged.
          </t>
        </list>
      </t>
      <t>
        Often, the administrator just wants to disable
        default access to the secure content, so
        no inadvertent or malicious changes can be made
        to the server.  This allows the default rules
        to be more lenient, without significantly
        increasing the security risk.
      </t>
      <t>
        A data model designer needs to be able to
        use machine-readable statements to identify
        content that needs to be protected by default.
        This will allow client and server tools to automatically
        identify data-model-specific security risks, by
        denying access to sensitive data unless the user is
        explicitly authorized to perform the requested access operation.
      </t>
    </section>
  </section>

  <section title="NETCONF Access Control Model (NACM)"
           anchor="acm">
    <section title="Introduction">
      <t>
        This section provides a high-level overview of the
        access control model structure.  It describes the
        NETCONF protocol message processing model and the conceptual
        access control requirements within that model.
      </t>

      <section title="Features">
        <t>
          The NACM data model provides the following features:
          <list style="symbols">
            <t>
              Independent control of remote procedure call (RPC),
              action, data, and notification access.
            </t>
            <t>
              Simple access control rules configuration
              data model that is easy to use.
            </t>
            <t>
              The concept of an emergency recovery session
              is supported, but configuration of the server
              for this purpose is beyond the scope of this document.
              An emergency recovery session will bypass all access
              control enforcement, in order to allow it to
              initialize or repair the NACM configuration.
            </t>
            <t>
              A simple and familiar set of datastore permissions is
              used.
            </t>
            <t>
              Support for YANG security tagging (e.g.,
              "nacm:default-deny-write" statement) allows default
              security modes to automatically exclude sensitive data.
            </t>
            <t>
              Separate default access modes for read, write, and
              execute permissions.
            </t>
            <t>
              Access control rules are applied to configurable groups
              of users.
            </t>
            <t>
              The access control enforcement procedures can be disabled during
              operation, without deleting any access control rules,
              in order to debug operational problems.
            </t>
            <t>
              Access control rules are simple to configure.
            </t>
            <t>
              The number of denied protocol operation requests
              and denied datastore write requests can be
              monitored by the client.
            </t>
            <t>
              Simple unconstrained YANG instance identifiers
              are used to configure access control rules for
              specific data nodes.
            </t>
          </list>
        </t>
      </section>

      <section title="External Dependencies">
        <t>
          The <xref target="RFC6241">NETCONF protocol</xref>
          is used for network management purposes within this document.
        </t>
        <t>
          The <xref target="RFC8040">RESTCONF protocol</xref>
          is used for network management purposes within this document.
        </t>
        <t>
          The <xref target="RFC7950">
            YANG Data Modeling Language</xref>
          is used to define the data models for use
          with the NETCONF or RESTCONF protocols.
          YANG is also used to define the data model in
          this document.
        </t>
      </section>

      <section title="Message Processing Model" anchor="message-proc-model" >
        <t>
          The following diagram shows the conceptual message
          flow model, including the points at which access
          control is applied during NETCONF message processing.
        </t>
        <t>
          RESTCONF operations are mapped to the access control model
          based on the HTTP method and resource class used in the operation.
          For example, a POST method on a data resource is considered
          "write data node" access, but a POST method on an operation
          resource is considered "operation" access.
        </t>
        <t>
          <figure anchor="NACM_model">
            <artwork>
<![CDATA[
                 +-------------------------+
                 |       session           |
                 |      (username)         |
                 +-------------------------+
                    |                 ^
                    V                 |
          +--------------+     +---------------+
          |   message    |     |   message     |
          | dispatcher   |     |   generator   |
          +--------------+     +---------------+
            |      |               ^         ^
            |      V               |         |
            |  +=============+     |         |
            |  | pre-read    |     |         |
            |  | data node   |     |         |
            |  | acc. ctl    |     |         |
            |  +=============+     |         |
            |    |                 |         |
            V    V                 |         |
      +===========+     +-------------+   +----------------+
      | operation |---> |    reply    |   | <notification> |
      | acc. ctl  |     |  generator  |   |  generator     |
      +===========+     +-------------+   +----------------+
            |              ^    ^                ^
            V       +------+    |                |
      +-----------+ |   +=============+  +================+
      | operation | |   |    read     |  | <notification> |
      | processor |-+   | data node   |  |  access ctl    |
      |           |     | acc. ctl    |  |                |
      +-----------+     +=============+  +================+
            |   |                  ^       ^     ^
            V   +----------------+ |       |     |
      +===========+              | |       | +============+
      |  write    |              | |       | | pre-read   |
      | data node |              | |       | | data node  |
      | acc. ctl  | -----------+ | |       | | acc. ctl   |
      +===========+            | | |       | +============+
            |                  | | |       |   ^
            V                  V V |       |   |
      +---------------+      +-------------------+
      | configuration | ---> |      server       |
      |   datastore   |      |  instrumentation  |
      |               | <--- |                   |
      +---------------+      +-------------------+]]>
            </artwork>
          </figure>
        </t>
        <t>
          The following high-level sequence of conceptual processing steps
          is executed for each received &lt;rpc&gt; message,
          if access control enforcement is enabled:
         <list style="symbols">

           <t>
     For each active session, access control is applied individually to all
     &lt;rpc&gt; messages (except &lt;close-session&gt;)
     received by the server, unless
     the session is identified as a recovery session.
           </t>
           <t>
             If the &lt;action&gt; operation defined in <xref
             target="RFC7950"/> is invoked, then read access is
             required for all instances in the hierarchy of data nodes
             that identifies the specific action in the datastore, and
             execute access is required for the action node.  If the
             user is not authorized to read all the specified data
             nodes and execute the action, then the request is
             rejected with an "access-denied" error.
           </t>
           <t>
             Otherwise, if the user is not authorized to execute the
             specified protocol operation, then the request is
             rejected with an "access-denied" error.
           </t>
           <t>
             If a datastore
             is accessed by the protocol operation, then the server
             checks if the client is authorized to access the nodes in
             the datastore.  If the user is not authorized to perform
             the requested access operation on the requested data,
             then the request is rejected with an "access-denied"
             error.
           </t>
         </list>
       </t>

       <t>
         The following sequence of conceptual processing steps
         is executed for each generated notification event,
         if access control enforcement is enabled:
         <list style="symbols">
           <t>
             Server instrumentation generates a notification
             for a particular subscription.
           </t>
           <t>
             If the notification statement is specified within a data
             subtree, as specified in <xref target="RFC7950"/>, then
             read access is required for all instances in the
             hierarchy of data nodes that identifies the specific
             notification in the datastore, and read access is
             required for the notification node.  If the user is not
             authorized to read all the specified data nodes and the
             notification node, then the notification is dropped for
             that subscription.
           </t>
           <t>
             If the notification statement is a top-level statement,
             the notification access control enforcer checks the
             notification event type, and if it is one that the user
             is not authorized to read, then the notification is
             dropped for that subscription.
           </t>
         </list>
       </t>
      </section>
    </section>

    <section title="Datastore Access">
      <t>
        The same access control rules apply to all
        datastores that support NACM, for example,
        the candidate configuration datastore or the running
        configuration datastore.
      </t>
      <t>
        All conventional configuration datastores and the operational
        state datastore are controlled by NACM.  Local or remote files
        or datastores accessed via the &lt;url&gt; parameter are not
        controlled by NACM.
      </t>

      <section title="Mapping New Datastores to NACM">
        <t>
          It is possible that new datastores will be defined
          over time for use with the NETCONF protocol.
          NACM MAY be applied to other datastores that have
          similar access rights as defined in NACM.

          To apply NACM to a new datastore, the new datastore
          specification needs to define how it maps to the NACM CRUDX
          access rights. It is possible only a subset of the NACM access
          rights would be applicable. For example, only retrieval access
          control would be needed for a read-only datastore.

          Operations and access rights not supported by the NACM CRUDX
          model are outside the scope of this document.
          A datastore does not need to use NACM, e.g., the datastore
          specification defines something else, or does not use
          access control.
        </t>
      </section>

      <section title="Access Rights">
        <t>
          A small set of hard-wired datastore access rights is needed
          to control access to all possible NETCONF protocol operations,
          including vendor extensions to the standard protocol operation set.
        </t>
        <t>
          The "CRUDX" model can support all NETCONF
          protocol operations:
          <list style="symbols">
            <t>
              Create: allows the client to add a new data node
              instance to a datastore.
            </t>
            <t>
              Read: allows the client to read a data node instance
              from a datastore or receive the notification event type.
            </t>
            <t>
              Update: allows the client to update an existing data
              node instance in a datastore.
            </t>
            <t>
              Delete: allows the client to delete a data node
              instance from a datastore.
            </t>
            <t>
              eXec: allows the client to execute the operation.
            </t>
          </list>
        </t>
      </section>

      <section title="RESTCONF Methods">
        <t>
          The RESTCONF protocol utilizes HTTP methods to perform
          datastore operations, similar to the NETCONF protocol.
          The NACM procedures were originally written for
          NETCONF protocol operations so the RESTCONF methods
          are mapped to NETCONF operations for the purpose of
          access control processing.  The enforcement procedures
          described within this document apply to both protocols
          unless explicitly stated otherwise.
        </t>
        <t>
          The request URI needs to be considered when processing
          RESTCONF requests on data resources:
          <list style="symbols">
            <t>
              For HEAD and GET requests, any data nodes
              which are ancestor nodes of the target resource are
              considered to be part of the retrieval request for
              access control purposes.
            </t>
            <t>
              For PUT, PATCH, and DELETE requests, any data nodes
              which are ancestor nodes of the target resource are not
              considered to be part of the edit request for access
              control purposes. The access operation for these nodes is
              considered to be "none". The edit begins at the
              target resource.
            </t>
            <t>
              For POST requests on data resources, any data nodes
              which are specified in the request URI, including the
              target resource, are not considered to be part of the
              edit request for access control purposes.
              The access operation for these nodes is considered
              to be "none". The edit begins at a child
              node of the target resource, specified in the message body.
            </t>
          </list>
        </t>
        <t>
          Not all RESTCONF methods are subject to access control.
          The following table specifies how each method is
          mapped to NETCONF protocol operations. The value "none"
          indicates that NACM is not applied at all to the specific
          RESTCONF method.
        </t>
        <texttable anchor="restconf_method_table"
                   title="Mapping RESTCONF Methods to NETCONF">
          <ttcol align='left'>method</ttcol>
          <ttcol align='left'>resource class</ttcol>
          <ttcol align='left'>NETCONF operation</ttcol>
          <ttcol align='left'>Access operation</ttcol>
          <c>OPTIONS</c>
          <c>all</c>
          <c>none</c>
          <c>N/A</c>

          <c>HEAD</c>
          <c>all</c>
          <c>&lt;get&gt;</c>
          <c>N/A</c>

          <c>GET</c>
          <c>all</c>
          <c>&lt;get&gt;</c>
          <c>N/A</c>

          <c>POST</c>
          <c>datastore, data</c>
          <c>&lt;edit-config&gt;</c>
          <c>create</c>

          <c>POST</c>
          <c>operation</c>
          <c>specified operation</c>
          <c>N/A</c>

          <c>PUT</c>
          <c>data</c>
          <c>&lt;edit-config&gt;</c>
          <c>create, replace</c>

          <c>PUT</c>
          <c>datastore</c>
          <c>&lt;copy-config&gt;</c>
          <c>replace</c>

          <c>PATCH</c>
          <c>data, datastore</c>
          <c>&lt;edit-config&gt;</c>
          <c>merge</c>

          <c>DELETE</c>
          <c>data</c>
          <c>&lt;edit-config&gt;</c>
          <c>delete</c>
        </texttable>
      </section>

      <section title="&lt;get&gt; and &lt;get-config&gt; Operations">
        <t>
          Data nodes to which the client does not have read access are
          silently omitted from the &lt;rpc-reply&gt; message.  This
          is done to allow NETCONF filters for &lt;get&gt; and
          &lt;get-config&gt; to function properly, instead of causing
          an "access-denied" error because the filter criteria would
          otherwise include unauthorized read access to some data
          nodes.  For NETCONF filtering purposes, the selection
          criteria is applied to the subset of nodes that the user is
          authorized to read, not the entire datastore.
        </t>
      </section>

      <section title="&lt;edit-config&gt; Operation">
        <t>
          The NACM access rights are not directly coupled to the
          &lt;edit-config&gt; "operation" attribute, although they are
          similar.  Instead, a NACM access right applies to all
          protocol operations that would result in a particular access
          operation to the target datastore.

          This section describes
          how these access rights apply to the specific access
          operations supported by the &lt;edit-config&gt; protocol operation.
        </t>
        <t>
          If the effective access operation is "none"
          (i.e., default-operation="none")
          for a particular data node,
          then no access control is applied to that data node.
          This is required to allow access to a subtree within
          a larger data structure.  For example, a user may be
          authorized to create a new "/interfaces/interface" list entry
          but not be authorized to create or delete its
          parent container ("/interfaces").
          If the "/interfaces" container already exists in
          the target datastore, then the effective operation
          will be "none" for the "/interfaces" node if an
          "/interfaces/interface" list entry is edited.
        </t>
        <t>
          If the protocol operation would result in the
          creation of a datastore node and the user does not
          have "create" access permission for that node, the
          protocol operation is rejected with an
          "access-denied" error.
        </t>
        <t>
          If the protocol operation would result in the
          deletion of a datastore node and the user does not
          have "delete" access permission for that node, the
          protocol operation is rejected with an
          "access-denied" error.
        </t>
        <t>
          If the protocol operation would result in the
          modification of a datastore node and the user does
          not have "update" access permission for that node,
          the protocol operation is rejected with an
          "access-denied" error.
        </t>

        <t>
          A "merge" or "replace" &lt;edit-config&gt; operation may
          include data nodes that do not alter portions of the
          existing datastore.  For example, a container or list node
          may be present for naming purposes but does not actually
          alter the corresponding datastore node.  These unaltered
          data nodes are ignored by the server and do not require any
          access rights by the client.
        </t>
        <t>
          A "merge" &lt;edit-config&gt; operation may include data
          nodes but not include particular child data nodes that are
          present in the datastore.  These missing data nodes within
          the scope of a "merge" &lt;edit-config&gt; operation are
          ignored by the server and do not require any access rights
          by the client.
        </t>
        <t>
          The contents of specific restricted datastore nodes MUST NOT
          be exposed in any &lt;rpc-error&gt; elements
          within the reply.
        </t>
      </section>

      <section title="&lt;copy-config&gt; Operation">
        <t>
          Access control for the &lt;copy-config&gt; protocol operation
          requires special consideration because the administrator may be
          replacing the entire target datastore.
        </t>
        <t>
          If the source of the &lt;copy-config&gt; protocol
          operation is the running configuration datastore
          and the target is the startup configuration
          datastore, the client is only required to
          have permission to execute the &lt;copy-config&gt;
          protocol operation.
        </t>
        <t>
          Otherwise:
          <list style="symbols">
            <t>
              If the source of the &lt;copy-config&gt; operation is a
              datastore, then data nodes to which the client does not
              have read access are silently omitted.
            </t>
            <t>
              If the target of the &lt;copy-config&gt; operation is a
              datastore, the client needs access to the modified
              nodes, specifically:
              <list style="symbols">
                <t>
                  If the protocol operation would result in the
                  creation of a datastore node and the user does not
                  have "create" access permission for that node, the
                  protocol operation is rejected with an
                  "access-denied" error.
                </t>
                <t>
                  If the protocol operation would result in the
                  deletion of a datastore node and the user does not
                  have "delete" access permission for that node, the
                  protocol operation is rejected with an
                  "access-denied" error.
                </t>
                <t>
                  If the protocol operation would result in the
                  modification of a datastore node and the user does
                  not have "update" access permission for that node,
                  the protocol operation is rejected with an
                  "access-denied" error.
                </t>
              </list>
            </t>
          </list>
        </t>
      </section>
      <section title="&lt;delete-config&gt; Operation">
        <t>
          Access to the &lt;delete-config&gt; protocol operation
          is denied by default.  The "exec-default" leaf
          does not apply to this protocol operation.
          Access
          control rules must be explicitly configured to
          allow invocation by a non-recovery session.
        </t>
      </section>
      <section title="&lt;commit&gt; Operation">
        <t>
          The server MUST determine the exact nodes in the running
          configuration datastore that are actually different and
          only check "create", "update", and "delete" access
          permissions for this set of nodes, which could be empty.
        </t>
        <t>
          For example, if a session can read the entire datastore
          but only change one leaf, that session needs to be
          able to edit and commit that one leaf.
        </t>
      </section>
      <section title="&lt;discard-changes&gt; Operation">
        <t>
          The client is only required to
          have permission to execute the &lt;discard-changes&gt;
          protocol operation.  No datastore permissions are needed.
        </t>
      </section>
      <section title="&lt;kill-session&gt; Operation">
        <t>
          The &lt;kill-session&gt; operation does not directly
          alter a datastore.  However, it allows one session
          to disrupt another session that is editing a datastore.
        </t>
        <t>
          Access to the &lt;kill-session&gt; protocol operation
          is denied by default.  The "exec-default" leaf
          does not apply to this protocol operation.  Access
          control rules must be explicitly configured to
          allow invocation by a non-recovery session.
        </t>
      </section>
    </section>

    <section title="Model Components">
      <t>
        This section defines the conceptual components
        related to the access control model.
      </t>

     <section title="Users">
       <t>
         A "user" is the conceptual entity that is associated
         with the access permissions granted to a particular session.
         A user is identified by a string that is unique
         within the server.
       </t>
       <t>
         As described in <xref target="RFC6241"/>,
         the username string is derived from the transport layer
         during session establishment.  If the transport layer cannot
         authenticate the user, the session is terminated.
       </t>
     </section>

     <section title="Groups">
       <t>
         Access to a specific NETCONF protocol operation is granted to
         a session, associated with a group, not a user.
       </t>
       <t>
         A group is identified by its name.  All group names are
         unique within the server.
       </t>
       <t>
         A group member is identified by a username string.
       </t>
       <t>
         The same user can be a member of multiple groups.
       </t>
     </section>

     <section title="Emergency Recovery Session">
       <t>
         The server MAY support a recovery session mechanism,
         which will bypass all access control enforcement.
         This is useful for restricting initial access
         and repairing a broken access control configuration.
       </t>
     </section>

     <section title="Global Enforcement Controls">
       <t>
         There are five global controls that are used to
         help control how access control is enforced.
       </t>
       <section title="enable-nacm Switch">
       <t>
         A global "enable-nacm" on/off switch is provided to enable
         or disable all access control enforcement.
         When this global switch is set to "true", then all
         requests are checked against the access control rules
         and only permitted if configured to allow the
         specific access request.
         When this global switch is set to "false", then all access
         requested are permitted.
       </t>
       </section>
       <section title="read-default Switch">
       <t>
         An on/off "read-default" switch is provided to
         enable or disable default access
         to receive data in replies and notifications.
         When the "enable-nacm" global switch is set to "true", then this
         global switch is relevant if no matching
         access control rule is found to explicitly
         permit or deny read access to the requested
         datastore data or notification event type.
       </t>
       <t>
         When this global switch is set to "permit" and no matching
         access control rule is found for the
         datastore read or notification event requested, then access
         is permitted.
       </t>
       <t>
         When this global switch is set to "deny" and no matching
         access control rule is found for the
         datastore read or notification event requested, then access
         is denied.
       </t>
       </section>
       <section title="write-default Switch">
       <t>
         An on/off "write-default" switch is provided to
         enable or disable default access
         to alter configuration data.
         When the "enable-nacm" global switch is set to "true", then this
         global switch is relevant if no matching
         access control rule is found to explicitly
         permit or deny write access to the requested
         datastore data.
       </t>
       <t>
         When this global switch is set to "permit" and no matching
         access control rule is found for the
         datastore write requested, then access is permitted.
       </t>
       <t>
         When this global switch is set to "deny" and no matching
         access control rule is found for the
         datastore write requested, then access
         is denied.
       </t>
       </section>
       <section title="exec-default Switch">
       <t>
         An on/off "exec-default" switch is provided to
         enable or disable default access
         to execute protocol operations.
         When the "enable-nacm" global switch is set to "true",
         then this global switch is relevant if no matching
         access control rule is found to explicitly
         permit or deny access to the requested
         NETCONF protocol operation.
       </t>
       <t>
         When this global switch is set to "permit" and no matching
         access control rule is found for the NETCONF
         protocol operation requested, then access is permitted.
       </t>
       <t>
         When this global switch is set to "deny" and no matching
         access control rule is found for the NETCONF
         protocol operation requested, then access is denied.
       </t>
       </section>
       <section title="enable-external-groups Switch">
         <t>
           When this global switch is set to "true", the group names
           reported by the transport layer for a session are
           used together with the locally configured group names to
           determine the access control rules for the session.
         </t>
         <t>
           When this switch is set to "false", the group names
           reported by the transport layer are ignored by
           NACM.
         </t>
       </section>
     </section>

     <section title="Access Control Rules">
       <t>
         There are four types of rules available in NACM:
         <list style="hanging">
           <t hangText="module rule:">
             controls access for definitions in
             a specific YANG module, identified by its
             name.
           </t>
           <t hangText="protocol operation rule:">
             controls access for a
             specific protocol operation, identified by its
             YANG module and name.
           </t>
           <t hangText="data node rule:">
             controls access for a
             specific data node, identified by its
             path location within the conceptual
             XML document for the data node.
           </t>
           <t hangText="notification rule:">
             controls access for a
             specific notification event type, identified by its
             YANG module and name.
           </t>
         </list>
       </t>
     </section>
   </section>

   <section title="Access Control Enforcement Procedures">
     <t>
       There are seven separate phases that need to be addressed,
       four of which are related to the NETCONF message processing model (<xref
target="message-proc-model" />).
       In addition, the initial startup mode for a NETCONF server,
       session establishment, and "access-denied" error-handling
       procedures also need to be considered.
     </t>

     <t>
       The server MUST use the access control rules in effect
       at the time it starts processing the message.
       The same access control rules MUST stay in effect for
       the processing of the entire message.
     </t>

     <section title="Initial Operation">
       <t>
         Upon the very first startup of the NETCONF server,
         the access control configuration will probably
         not be present.  If it isn't,
         a server MUST NOT allow any write access to
         any session role except a recovery session.
       </t>
       <t>
         Access rules are enforced any time a
         request is initiated from a user session.
         Access control is not enforced for
         server-initiated access requests, such as the
         initial load of the running configuration datastore, during bootup.
       </t>
     </section>

     <section title="Session Establishment">
       <t>
         The access control model applies specifically
         to the well-formed XML content transferred between a client
         and a server after session establishment has been completed
         and after the &lt;hello&gt; exchange has been successfully
         completed.
       </t>
       <t>
         Once session establishment is completed and a user
         has been authenticated, the transport layer reports
         the username and a possibly empty set of group names
         associated with the user to the NETCONF server.  The NETCONF
         server will enforce the access control rules, based on the
         supplied username, group names, and the configuration
         data stored on the server.
       </t>
     </section>

     <section title='"access-denied" Error Handling'>
       <t>
         The "access-denied" error-tag is generated when
         the access control system denies access to either a
         request to invoke a protocol operation or a request to
         perform a particular access operation on the configuration
         datastore.
       </t>
       <t>
         A server MUST NOT include any information the client is not
         allowed to read in any &lt;error-info&gt; elements within the
         &lt;rpc-error&gt; response.
       </t>
     </section>

     <section title="Incoming RPC Message Validation">
       <t>
         The diagram below shows the basic
         conceptual structure of the access control processing model
         for incoming NETCONF &lt;rpc&gt; messages within a server.
       </t>

       <t>
         <figure anchor="NACM_incoming">
           <artwork>
<![CDATA[                NETCONF server
               +------------+
               |    XML     |
               |   message  |
               | dispatcher |
               +------------+
                      |
                      |
                      V
               +------------+
               | NC-base NS |
               |   <rpc>    |
               +------------+
                 |   |  |
                 |   |  +-------------------------+
                 |   +------------+               |
                 V                V               V
            +-----------+ +---------------+ +------------+
            | Vendor NS | | NC-base NS    | | NC-base NS |
            | <my-edit> | | <edit-config> | | <unlock>   |
            +-----------+ +---------------+ +------------+
                   |               |
                   |               |
                   V               V
                 +----------------------+
                 |                      |
                 |    configuration     |
                 |      datastore       |
                 +----------------------+]]>
           </artwork>
         </figure>
       </t>
       <t>
         Access control begins with the message dispatcher.
       </t>
       <t>
         After the server validates the &lt;rpc&gt; element
         and determines the namespace URI and the element
         name of the protocol operation being requested, the server
         verifies that the user is authorized
         to invoke the protocol operation.
       </t>
       <t>
         The server MUST separately authorize every protocol operation
         by following these steps:
         <list style="numbers">
           <t>
             If the "enable-nacm" leaf is set to "false", then the
             protocol operation is permitted.
           </t>
           <t>
             If the requesting session is identified as a recovery session,
             then the protocol operation is permitted.
           </t>
           <t>
             If the requested operation is the NETCONF
             &lt;close-session&gt; protocol operation, then
             the protocol operation is permitted.
           </t>
           <t>
             Check all the "group" entries for ones that contain a
             "user-name" entry that equals the username for the
             session making the request.  If the
             "enable-external-groups" leaf is "true", add to these
             groups the set of groups provided by the transport layer.
           </t>
           <t>
             If no groups are found, continue with step 10.
           </t>
           <t>
             Process all rule-list entries, in the order they
             appear in the configuration.
             If a rule-list's "group" leaf-list does not match any
             of the user's groups, proceed to the next rule-list entry.
           </t>
           <t>
             For each rule-list entry found, process all rules, in
             order, until a rule that matches the requested access operation
             is found.  A rule matches if all of the following
             criteria are met:
             <list style="symbols">
               <t>
                 The rule's "module-name" leaf is "*" or equals the
                 name of the YANG module where the protocol operation
                 is defined.
               </t>
               <t>
                 The rule does not have a "rule-type" defined or the
                 "rule-type" is "protocol-operation" and the
                 "rpc-name" is "*" or equals the name of the requested protocol
                 operation.
               </t>
               <t>
                 The rule's "access-operations" leaf has the "exec" bit
                 set or has the special value "*".
               </t>
             </list>
           </t>
           <t>
             If a matching rule is found, then the "action" leaf
             is checked.  If it is equal to "permit", then the protocol
             operation is permitted; otherwise, it is denied.
           </t>
           <t>
             At this point, no matching rule was found in any rule-list
             entry.
           </t>


           <t anchor="rpc-default">
             If the requested protocol operation is defined in a
             YANG module advertised in the server capabilities and
             the "rpc" statement contains a "nacm:default-deny-all"
             statement, then the protocol operation is denied.
           </t>
           <t>
             If the requested protocol operation is the NETCONF
             &lt;kill-session&gt; or &lt;delete-config&gt;, then the
             protocol operation is denied.
           </t>
           <t>
             If the "exec-default" leaf is set to "permit", then
             permit the protocol operation; otherwise, deny the
             request.
           </t>
         </list>
       </t>
       <t>
         If the user is not authorized to invoke the protocol operation,
         then an &lt;rpc-error&gt; is generated with the following
         information:
         <list style="hanging">
           <t hangText="error-tag:">access-denied</t>
           <t hangText="error-path:">
             Identifies the requested protocol operation.  The following
             example represents the &lt;edit-config&gt; protocol
             operation in the
             NETCONF base namespace:
             <figure>
               <artwork>
      <![CDATA[<error-path
        xmlns:nc="urn:ietf:params:xml:ns:netconf:base:1.0">
          /nc:rpc/nc:edit-config
      </error-path>
]]></artwork>
             </figure>
           </t>
         </list>
       </t>
       <t>
         If a datastore is accessed, either directly or as a side
         effect of the protocol operation, then the server MUST
         intercept the access operation and make sure the user is
         authorized to perform the requested access operation on the
         specified data, as defined in <xref target="node-access"/>.
       </t>
     </section>

     <section title="Data Node Access Validation" anchor="node-access">
       <t>
         If a data node within a datastore is accessed, or an action
         or notification tied to a data node, then the
         server MUST ensure that the user is authorized to
         perform the requested "read", "create", "update", "delete",
         or "execute"
         access operation on the specified data node.
       </t>
       <t>
         If an action is requested to be executed, the server MUST
         ensure that the user is authorized to perform the "execute"
         access operation on the requested action.
       </t>
       <t>
         If a notification tied to a data node is generated, the server MUST
         ensure that the user is authorized to perform the "read"
         access operation on the requested notification.
       </t>
       <t>
         The data node access request is authorized by following
         these steps:
         <list style="numbers">
           <t>
             If the "enable-nacm" leaf is set to "false", then the
             access operation is permitted.
           </t>
           <t>
             If the requesting session is identified as a
             recovery session, then the access operation is permitted.
           </t>
           <t>
             Check all the "group" entries for ones that contain a
             "user-name" entry that equals the username for the
             session making the request.  If the
             "enable-external-groups" leaf is "true", add to these
             groups the set of groups provided by the transport layer.
           </t>
           <t>
             If no groups are found, continue with step 9.
           </t>
           <t>
             Process all rule-list entries, in the order
             they appear in the configuration.  If a
             rule-list's "group" leaf-list does not match any
             of the user's groups, proceed to the next rule-list entry.
           </t>
           <t>
             For each rule-list entry found, process all rules, in
             order, until a rule that matches the requested
             access operation is found.  A rule matches if all of the following
             criteria are met:
             <list style="symbols">
               <t>
                 The rule's "module-name" leaf is "*" or equals the
                 name of the YANG module where the requested data node
                 is defined.
               </t>
               <t>
                 The rule does not have a "rule-type" defined or the
                 "rule-type" is "data-node" and the "path" matches the
                 requested data node, action node, or notification node.
               </t>
               <t>
                 For a "read" access operation, the rule's
                 "access-operations" leaf has the "read" bit set or
                 has the special value "*".
               </t>
               <t>
                 For a "create" access operation, the rule's
                 "access-operations" leaf has the "create" bit set or
                 has the special value "*".
               </t>
               <t>
                 For a "delete" access operation, the rule's
                 "access-operations" leaf has the "delete" bit set or
                 has the special value "*".
               </t>
               <t>
                 For an "update" access operation, the rule's
                 "access-operations" leaf has the "update" bit set or
                 has the special value "*".
               </t>
               <t>
                 For an "execute" access operation, the rule's
                 "access-operations" leaf has the "exec" bit set or
                 has the special value "*".
               </t>
             </list>
           </t>
           <t>
             If a matching rule is found, then the "action" leaf
             is checked.  If it is equal to "permit", then the
             data node access is permitted; otherwise, it is denied.
             For a "read" access operation, "denied" means that the requested
             data is not returned in the reply.
           </t>
           <t>
             At this point, no matching rule was found in any rule-list
             entry.
           </t>
           <t anchor="data-node-default">
             For a "read" access operation, if the requested data node is defined
             in a YANG module advertised in the server capabilities
             and the data definition statement contains a
             "nacm:default-deny-all" statement, then the requested data
             node is not included in the reply.
           </t>
           <t>
             For a "write" access operation, if the requested data node
             is defined in a YANG module advertised in the server
             capabilities and the data definition statement contains
             a "nacm:default-deny-write" or a "nacm:default-deny-all"
             statement, then the data node access request is denied.
           </t>
           <t>
             For a "read" access operation, if the "read-default" leaf is set to
             "permit", then include the requested data node in the reply;
             otherwise, do not include the requested data node in the reply.
           </t>
           <t>
             For a "write" access operation, if the "write-default" leaf is set
             to "permit", then permit the data node access request;
             otherwise, deny the request.
           </t>
           <t>
             For an "execute" access operation, if the "exec-default"
             leaf is set to "permit", then permit the request;
             otherwise, deny the request.
           </t>
         </list>
       </t>
     </section>

     <section title="Outgoing &lt;notification&gt; Authorization">
       <t>
         Configuration of access control rules specifically
         for descendant nodes of the notification event type
         element are outside the scope of this document.
         If the user is authorized to receive the
         notification event type, then it is also
         authorized to receive any data it contains.
       </t>
       <t>
         If the notification is specified within a data subtree, as
         specified in <xref target="RFC7950"/>, then read access to
         the notification is required.  Processing continues as
         described in <xref target="node-access"/>.
       </t>
       <t>
         The following figure shows the conceptual message processing
         model for outgoing &lt;notification&gt; messages.
       </t>

       <t>
         <figure anchor="NACM_outgoing_notification">
           <artwork>
             <![CDATA[

                NETCONF server
               +------------+
               |    XML     |
               |   message  |
               | generator  |
               +------------+
                     ^
                     |
             +----------------+
             | <notification> |
             |  generator     |
             +----------------+
                     ^
                     |
            +=================+
            | <notification>  |
            |  access control |
            |  <eventType>    |
            +=================+
                     ^
                     |
         +------------------------+
         | server instrumentation |
         +------------------------+
                   |     ^
                   V     |
          +----------------------+
          |    configuration     |
          |      datastore       |
          +----------------------+
]]>
           </artwork>
         </figure>
       </t>
       <t>
         The generation of a notification for a specific subscription
         <xref target="RFC5277"/> is authorized by following these
         steps:
         <list style="numbers">
           <t>
             If the "enable-nacm" leaf is set to "false", then the
             notification is permitted.
           </t>
           <t>
             If the session is identified as a recovery session,
             then the notification is permitted.
           </t>
           <t>
             If the notification is the NETCONF
             &lt;replayComplete&gt; or &lt;notificationComplete&gt;
             event type <xref target="RFC5277"/>, then
             the notification is permitted.
           </t>
           <t>
             Check all the "group" entries for ones that contain a
             "user-name" entry that equals the username for the
             session making the request.  If the
             "enable-external-groups" leaf is "true", add to these
             groups the set of groups provided by the transport layer.
           </t>
           <t>
             If no groups are found, continue with step 10.

           </t>
           <t>
             Process all rule-list entries, in the order
             they appear in the configuration.  If a
             rule-list's "group" leaf-list does not match any
             of the user's groups, proceed to the next rule-list entry.
           </t>
           <t>
             For each rule-list entry found, process all rules, in
             order, until a rule that matches the requested
             access operation
             is found.  A rule matches if all of the following
             criteria are met:
             <list style="symbols">
               <t>
                 The rule's "module-name" leaf is "*" or equals the
                 name of the YANG module where the notification
                 is defined.
               </t>

               <!-- errata 3409 applied below -->
               <t>
                 The rule does not have a "rule-type" defined or the
                 "rule-type" is "notification" and the
                 "notification-name" is "*" or equals the name of the
                 notification.
               </t>
               <t>
                 The rule's "access-operations" leaf has the "read" bit
                 set or has the special value "*".
               </t>
             </list>
           </t>
           <t>
             If a matching rule is found, then the "action" leaf
             is checked.  If it is equal to "permit", then permit the
             notification; otherwise, drop the notification for the
             associated subscription.
           </t>
           <t>
             Otherwise, no matching rule was found in any rule-list
             entry.
           </t>
           <t anchor="notif-default">
             If the requested notification is defined in a
             YANG module
             advertised in the server capabilities and the
             "notification" statement contains a
             "nacm:default-deny-all" statement, then the notification
             is dropped for the associated subscription.
           </t>
           <t>
             If the "read-default" leaf is set to "permit", then
             permit the notification; otherwise, drop the notification
             for the associated subscription.
           </t>
         </list>
       </t>
     </section>
   </section>



   <section title="Data Model Definitions" anchor="DM">

     <section title="Data Organization">
       <t>
         The following diagram highlights the contents
         and structure of the NACM YANG module.
       </t>
       <figure>
         <artwork><![CDATA[
m4_include(ietf-netconf-acm.tree)
]]></artwork>
       </figure>
     </section>



     <section title="YANG Module">
       <t>
         The following YANG module specifies
         the normative NETCONF content that MUST
         by supported by the server.
       </t>
       <t>
         The "ietf-netconf-acm" YANG module imports typedefs from <xref
         target="RFC6991"/>.
       </t>
       <t>
         <figure anchor="YANG_module">

<!-- errata 3862 applied in matchall-string-type below -->
<!-- errata 3863 applied in group-name-type below -->

           <artwork><![CDATA[
<CODE BEGINS> file "ietf-netconf-acm@2017-05-29.yang"
m4_include(ietf-netconf-acm.yang)
<CODE ENDS>
             ]]></artwork>
         </figure>
       </t>
     </section>

   </section>

   <section anchor="IANA" title="IANA Considerations">
     <t>
       This document reuses the URI for "ietf-netconf-acm"
       in "The IETF XML Registry".
     </t>
     <t>
       This document updates the module registration in the
       "YANG Module Names" registry to reference
       this RFC instead of RFC 6536.

       Following the format in <xref target="RFC6020" />,
       the following has been registered.

       <figure>
         <artwork><![CDATA[     Name: ietf-netconf-acm
     Namespace: urn:ietf:params:xml:ns:yang:ietf-netconf-acm
     Prefix: nacm
     reference: RFC XXXX
             ]]></artwork>
       </figure>
     </t>
   </section>

   <section anchor="Security" title="Security Considerations">
     <t>
       This entire document discusses access control
       requirements and mechanisms for restricting
       NETCONF protocol behavior within a given session.
     </t>
     <t>
       This section highlights the issues for an administrator
       to consider when configuring a NETCONF server with NACM.
     </t>
     <section title="NACM Configuration and Monitoring Considerations">
       <t>
         Configuration of the access control system is
         highly sensitive to system security.  A server may
         choose not to allow any user configuration to
         some portions of it, such as the global security level
         or the groups that allowed access to system resources.
       </t>
       <t>
         By default, NACM enforcement is enabled.
         By default, "read" access to all datastore contents is enabled
         (unless "nacm:default-deny-all" is specified for the data definition),
         and "exec" access is enabled for safe protocol operations.
         An administrator needs to ensure that NACM is enabled
         and also decide if the default access parameters are
         set appropriately.  Make sure the following data nodes
         are properly configured:
         <list style="symbols">
           <t>/nacm/enable-nacm (default "true")</t>
           <t>/nacm/read-default (default "permit")</t>
           <t>/nacm/write-default (default "deny")</t>
           <t>/nacm/exec-default (default "permit")</t>
         </list>
       </t>
       <t>
         An administrator needs to restrict write access to all
         configurable objects within this data model.
       </t>
       <t>
         If write access is allowed for configuration of
         access control rules, then care needs to be taken
         not to disrupt the access control enforcement.
         For example, if the NACM access control rules are edited directly
         within the running configuration datastore (i.e.,
         :writable-running capability is supported and used),
         then care needs to be taken not to allow unintended
         access while the edits are being done.
       </t>
       <t>
         An administrator needs to make sure that
         the translation from a transport- or implementation-dependent
         user identity to a NACM username is unique
         and correct.
         This requirement is specified in detail in Section 2.2
         of <xref target="RFC6241"/>.
       </t>
       <t>
         An administrator needs to be aware that the YANG data structures
         representing access control rules (/nacm/rule-list
         and /nacm/rule-list/rule)
         are ordered by the client.  The server will evaluate the
         access control rules according to their relative conceptual order
         within the running configuration datastore.
       </t>
       <t>
         Note that the /nacm/groups data structure contains
         the administrative group names used by the server.
         These group names may be configured locally and/or
         provided through an external protocol, such as RADIUS
         <xref target="RFC2865"/><xref target="RFC5607"/>.
       </t>
       <t>
         An administrator needs to be aware of the security properties
         of any external protocol used by the transport layer
         to determine group names.  For example, if this protocol does
         not protect against man-in-the-middle attacks, an attacker
         might be able to inject group names that are configured in
         NACM, so that a user gets more permissions than it should.
         In such cases, the administrator may wish to disable the
         usage of such group names, by setting
         /nacm/enable-external-groups to "false".
       </t>
       <t>
         An administrator needs to restrict read access to the
         following objects within this data model, as they reveal
         access control configuration that could be considered
         sensitive.
         <list style="symbols">
           <t>/nacm/enable-nacm</t>
           <t>/nacm/read-default</t>
           <t>/nacm/write-default</t>
           <t>/nacm/exec-default</t>
           <t>/nacm/enable-external-groups</t>
           <t>/nacm/groups</t>
           <t>/nacm/rule-list</t>
         </list>
       </t>
     </section>

     <section title="General Configuration Issues">
       <t>
         There is a risk that invocation of
         non-standard protocol operations will have undocumented side effects.
         An administrator needs to construct access control rules
         such that the configuration datastore is protected
         from such side effects.
       </t>
       <t>
         It is possible for a session with some write access
         (e.g., allowed to invoke &lt;edit-config&gt;),
         but without any access to a particular datastore subtree
         containing sensitive data, to determine the presence
         or non-presence of that data.
         This can be done by repeatedly issuing
         some sort of edit request (create, update, or delete)
         and possibly receiving "access-denied" errors in response.
         These "fishing" attacks can identify the presence or
         non-presence of specific sensitive data even without
         the "error-path" field being present within the &lt;rpc-error&gt;
         response.
       </t>
       <t>
         It may be possible for the set of NETCONF capabilities
         on the server to change over time.  If so, then there is a risk
         that new protocol operations, notifications, and/or
         datastore content have been added to the device.
         An administrator needs to be sure the access control
         rules are correct for the new content in this case.
         Mechanisms to detect NETCONF capability changes on
         a specific device are outside the scope of this document.
       </t>
       <t>
         It is possible that the data model definition itself
         (e.g., YANG when-stmt) will help an unauthorized session
         determine the presence or even value of sensitive data nodes
         by examining the presence and values of different data nodes.
       </t>
       <t>
         There is a risk that non-standard protocol operations, or
         even the standard &lt;get&gt; protocol operation, may
         return data that "aliases" or "copies" sensitive data
         from a different data object.  There may simply be
         multiple data model definitions that expose
         or even configure the same underlying system
         instrumentation.
       </t>
       <t>
         A data model may contain external keys
         (e.g., YANG leafref), which expose values
         from a different data structure.
         An administrator needs to
         be aware of sensitive data models that contain leafref nodes.
         This entails finding all the leafref objects that
         "point" at the sensitive data (i.e., "path-stmt" values) that
         implicitly or explicitly include the sensitive data node.
       </t>
       <t>
         It is beyond the scope of this document to define access
         control enforcement
         procedures for underlying device instrumentation that may
         exist to support the NETCONF server operation.  An administrator
         can identify each protocol operation that the server provides
         and decide if it needs any access control applied to it.
       </t>
       <t>
         This document incorporates the optional use of a recovery session
         mechanism, which can be used to bypass access control
         enforcement in emergencies, such as NACM configuration errors
         that disable all access to the server.
         The configuration and identification of such
         a recovery session mechanism are implementation-specific
         and outside the scope of this document.
         An administrator needs to be aware of any recovery session
         mechanisms available on the device and make sure they
         are used appropriately.
       </t>
       <t>
         It is possible for a session to disrupt configuration
         management, even without any write access to the configuration,
         by locking the datastore. This may be done to ensure all or
         part of the configuration  remains stable while it is being
         retrieved, or it may be done as a "denial-of-service" attack.
         There is no way for the server to know the difference.
         An administrator may wish to
         restrict "exec" access to the following protocol operations:
         <list style="symbols">
           <t>&lt;lock&gt;</t>
           <t>&lt;unlock&gt;</t>
           <t>&lt;partial-lock&gt;</t>
           <t>&lt;partial-unlock&gt;</t>
         </list>
       </t>
     </section>
     <section title="Data Model Design Considerations">
       <t>
         Designers need to clearly identify any sensitive data,
         notifications, or protocol operations defined within a YANG
         module.  For such definitions, a "nacm:default-deny-write" or
         "nacm:default-deny-all" statement ought to be present, in
         addition to a clear description of the security risks.
       </t>
       <t>
         Protocol operations need to be properly documented by the
         data model designer, so it is clear to administrators what
         data nodes (if any) are affected by the protocol operation
         and what information (if any) is returned in the
         &lt;rpc-reply&gt; message.
       </t>
       <t>
         Data models ought to be designed so that different access
         levels for input parameters to protocol operations are not required.
         Use of generic protocol operations should be avoided, and if different access levels
         are needed, separate
         protocol operations should be defined instead.
       </t>
     </section>
   </section>
  </section>
 </middle>


 <back>
  <references title="Normative References">
    &rfc2119;
<!--    &rfc3688;  -->
    &rfc5277;
    &rfc6020;
    &rfc6241;
    &rfc6991;
    &rfc7230;
    &rfc7950;
    &rfc8040;
    &I-D.ietf-netmod-revised-datastores;
  </references>

  <references title="Informative References">
    &rfc2865;
    &rfc5607;
  </references>


  <section title="Change Log">

    <figure>
      <artwork>
        <![CDATA[
    -- RFC Ed.: remove this section before publication.
        ]]></artwork>
    </figure>

    <t>
      The NACM issue tracker can be found here:
      https://github.com/netconf-wg/rfc6536bis/issues
    </t>

    <section title="v03 to v04">
      <t>
      <list style="symbols">
        <t>
          Clarify NETCONF protocol operation vs added operation
          via additional YANG modules
        </t>
        <t>
          Change term 'NETCONF transport layer' to 'transport layer'
        </t>
      </list>
      </t>
    </section>

    <section title="v02 to v03">
      <t>
      <list style="symbols">
        <t>
          Clarify NACM YANG extensions for use outside NACM
        </t>
      </list>
      </t>
    </section>

    <section title="v01 to v02">
      <t>
      <list style="symbols">
        <t>
          Corrected section title for changes since RFC 6536.
        </t>
        <t>
          Added section 'Mapping New Datastores to NACM'.
        </t>
        <t>
          Changed term NETCONF datastore to datastore/
        </t>
        <t>
          Removed text about RESTCONF and a conceptual datastore.
        </t>
      </list>
      </t>
    </section>

    <section title="v00 to v01">
      <t>
      <list style="symbols">
        <t>
          Updated RESTCONF reference
        </t>
      </list>
      </t>
    </section>

    <section title="v00">
      <t>
      <list style="symbols">
        <t>
          Renamed document from draft-bierman-netconf-rfc6536bis-01
          to draft-ietf-netconf-rfc6536bis-00.
        </t>
      </list>
      </t>
    </section>

  </section>

  <section title="Usage Examples">
    <t>
      The following XML snippets are provided as examples only,
      to demonstrate how NACM can be configured to perform
      some access control tasks.
    </t>
    <section title="&lt;groups&gt; Example">
      <t>
        There needs to be at least one &lt;group&gt; entry
        in order for any of the access control rules
        to be useful.
      </t>
      <t>
        The following XML shows arbitrary groups
        and is not intended to represent any particular
        use case.
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
m4_include(ex1.xml)
]]>
          </artwork>
        </figure>
      </t>
      <t>
        This example shows three groups:
        <list style="hanging">
          <t hangText="admin:">
            The "admin" group contains two users named "admin" and "andy".
          </t>
          <t hangText="limited:">
            The "limited" group contains two users named
            "wilma" and "bam-bam".
          </t>
          <t hangText="guest:">
            The "guest" group contains two users named
            "guest" and "guest@example.com".
          </t>
        </list>
      </t>
    </section>

    <section title="Module Rule Example">


      <t>
        Module rules are used to control access to all the content
        defined in a specific module.  A module rule has the
        &lt;module-name&gt; leaf set, but no case in the "rule-type"
        choice.
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
m4_include(ex2.xml)
]]>
          </artwork>
        </figure>
      </t>
      <t>
        This example shows four module rules:
        <list style="hanging">
          <t hangText="deny-ncm:">
            This rule prevents the "guest" group from
            reading any monitoring information in
            the "ietf-netconf-monitoring" YANG module.
          </t>
          <t hangText="permit-ncm:">
            This rule allows the "limited" group to read the
            "ietf-netconf-monitoring" YANG module.
          </t>
          <t hangText="permit-exec:">
            This rule allows the "limited" group to invoke any
            protocol operation supported by the server.
          </t>
          <t hangText="permit-all:">
            This rule allows the "admin" group complete access
            to all content in the server.  No subsequent rule
            will match for the "admin" group because of this
            module rule.
          </t>
        </list>
      </t>
    </section>

    <section title="Protocol Operation Rule Example">
      <t>
        Protocol operation rules are used to control access to
        a specific protocol operation.
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
m4_include(ex3.xml)
]]>
          </artwork>
        </figure>
      </t>
      <t>
        This example shows three protocol operation rules:
        <list style="hanging">
          <t hangText="deny-kill-session:">
            This rule prevents the "limited" or "guest" groups
            from invoking the NETCONF
            &lt;kill-session&gt; protocol operation.
          </t>
          <t hangText="deny-delete-config:">
            This rule prevents the "limited" or "guest" groups
            from invoking the NETCONF
            &lt;delete-config&gt; protocol operation.
          </t>
          <t hangText="permit-edit-config:">
            This rule allows the "limited" group
            to invoke the NETCONF
            &lt;edit-config&gt; protocol operation.
            This rule will have no real effect
            unless the "exec-default" leaf is set to "deny".
          </t>
        </list>
      </t>
    </section>

    <section title="Data Node Rule Example">
      <t>
        Data node rules are used to control access to
        specific (config and non-config) data nodes
        within the NETCONF content provided by the server.
      </t>

      <t>
        <figure>
          <artwork><![CDATA[
m4_include(ex4.xml)
]]>
          </artwork>
        </figure>
      </t>
      <t>
        This example shows four data node rules:
        <list style="hanging">
          <t hangText="deny-nacm:">
            This rule denies the "guest" group
            any access to the &lt;nacm&gt; subtree.
            Note that the default namespace is only
            applicable because this subtree is defined
            in the same namespace as the &lt;data-rule&gt;
            element.
          </t>
          <t hangText="permit-acme-config:">
            This rule gives the "limited" group
            read-write access to the acme &lt;config-parameters&gt;.
          </t>
          <t hangText="permit-dummy-interface:">
            This rule gives the "limited" and "guest" groups
            read-update access to the acme &lt;interface&gt;
            entry named "dummy".  This entry cannot be created or
            deleted by these groups, just altered.
          </t>
          <t hangText="permit-interface:">
            This rule gives the "admin" group
            read-write access to all acme &lt;interface&gt;
            entries.
          </t>
        </list>
      </t>
    </section>

    <section title="Notification Rule Example">
      <t>
        Notification rules are used to control access to
        a specific notification event type.
      </t>
      <t>
        <figure>
          <artwork><![CDATA[
m4_include(ex5.xml)
]]>
          </artwork>
        </figure>
      </t>
      <t>
        This example shows one notification rule:
        <list style="hanging">
          <t hangText="deny-config-change:">
            This rule prevents the "limited" or "guest" groups
            from receiving the
            acme &lt;sys-config-change&gt; event type.
          </t>
        </list>
      </t>
    </section>
  </section>


 </back>

</rfc>
